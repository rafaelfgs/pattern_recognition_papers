source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/code.R')
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/code.R')
input = "net_mnist_0-9_9861.RData"
is.character(input)
file.exists(input)
load(input)
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/code.R')
View(net)
plot(net$L,type='l',xlab=NA,ylab=NA,xlim=c(0,600),ylim=c(20,35),col='black')
plot(net$L,type='l',xlab=NA,ylab=NA,xlim=c(0,600),ylim=c(55,25),col='black')
plot(net$L,type='l',xlab=NA,ylab=NA,xlim=c(0,600),ylim=c(25,55),col='black')
par(new=TRUE)
plot(net$M,type='l',xlab=NA,ylab=NA,xlim=c(0,600),ylim=c(25,55),col='red')
png("L_MNIST.png")
plot(net$L,type='l',xlab=NA,ylab=NA,xlim=c(0,600),ylim=c(25,55),col='blue')
par(new=TRUE)
plot(net$M,type='l',xlab=NA,ylab=NA,xlim=c(0,600),ylim=c(25,55),col='black')
dev.off()
png("L_MNIST.png")
plot(net$L,type='l',xlab=NA,ylab=NA,xlim=c(0,600),ylim=c(25,55),col='blue')
dev.off()
createNet( input = "net_cifar10_0-9_4550.RData" )
png("L_CIFAR10.png")
plot(net$L,type='l',xlab=NA,ylab=NA,xlim=c(0,600),ylim=c(25,55),col='blue')
dev.off()
View(net)
net$M[4000]
plot(net$L,type='l',xlab=NA,ylab=NA,xlim=c(0,600),ylim=c(100,50),col='blue')
plot(net$L,type='l',xlab=NA,ylab=NA,xlim=c(0,600),ylim=c(50,100),col='blue')
png("L_CIFAR10.png")
plot(net$L,type='l',xlab=NA,ylab=NA,xlim=c(0,600),ylim=c(50,100),col='blue')
dev.off()
View(net)
x <- base$train$x; y <- base$train$y; numdata <- 1000; alpha <- 0.5; batchsize <- 50; numepochs <- 1 ; i <- 1L ; j <- 1L
yclass <- unique(y)
numbatches <- floor( numdata / batchsize )
ind <- sample( dim(x)[4] , numdata )
batch_x <- x[ , , , ind[ ((j-1)*batchsize+1) : (j*batchsize) ] ]
batch_x <- array( batch_x , c( dim(x)[1:3] , batchsize ) )
batch_y <- y[ ind[ ((j-1)*batchsize+1) : (j*batchsize) ] ]
cnnFF( batch_x )
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/code.R')
base <- loadMnist( classvalues = 0:9 )
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/code.R')
x <- base$train$x; y <- base$train$y; numdata <- 60000; alpha <- 0.5; batchsize <- 50; numepochs <- 1 ; i <- 1L ; j <- 1L
yclass <- unique(y)
numbatches <- floor( numdata / batchsize )
ind <- sample( dim(x)[4] , numdata )
batch_x <- x[ , , , ind[ ((j-1)*batchsize+1) : (j*batchsize) ] ]
batch_x <- array( batch_x , c( dim(x)[1:3] , batchsize ) )
batch_y <- y[ ind[ ((j-1)*batchsize+1) : (j*batchsize) ] ]
cnnFF( batch_x )
y<-batch_y
fvHat <- net$layers[[length(net$layers)]]$a;
fvHat <- net$layers[[length(net$layers)]]$a;
validcols <- rep( 0 , length(unique(y)) )
for ( n in 1:length(unique(y)) ) {
validcols[n] <- which(unique(y)[n]==yclass)
}
fvMean <- array( 0 , c( nrow(fvHat) , length(yclass) ) )
colnames(fvMean) = yclass
for ( n in validcols ) {
fvMean[,n] <- rowMeans(array(fvHat[,y==yclass[n]],c(nrow(fvHat),max(c(1,sum(y==yclass[n]))))))
}
fvCurr <- array( 0 , c( nrow(fvHat) , length(yclass) ) )
colnames(fvCurr) = yclass
if ( "final" %in% names(net$fv) ) {
for ( n in validcols ) {
if ( !( yclass[n] %in% colnames(net$fv$final) ) ) {
stop( sprintf( "Class value \"%s\" not found on \"net$fv$final!\"!\n\n" , yclass[n] ) )
}
fvCurr[,n] <- net$fv$final[ , colnames(net$fv$final) == yclass[n] ]
}
}
for ( n in validcols ) {
fvCurr[ fvMean[,n] >= apply(fvMean[,validcols],1,mean) , n ] <- 1
fvCurr[ fvMean[,n] <  apply(fvMean[,validcols],1,mean) , n ] <- 0
}
if ( "memory" %in% names(net$fv) ) {
fvMemory <- net$fv$memory
} else {
fvMemory <- array( 0 , dim(fvCurr) )
}
colnames(fvMemory) = yclass
memMax <- apply(fvMemory[,validcols],1,mean) + apply(fvMemory[,validcols],1,sd)/2
memMin <- apply(fvMemory[,validcols],1,mean) - apply(fvMemory[,validcols],1,sd)/2
fvFinal <- fvCurr
fvFinal[ fvMemory > array(memMax,dim(fvFinal)) ] <- 1
fvFinal[ fvMemory < array(memMin,dim(fvFinal)) ] <- 0
fvMemory[ fvCurr == 1 ] <- fvMemory[ fvCurr == 1 ] + 1
fvMemory[ fvCurr == 0 ] <- fvMemory[ fvCurr == 0 ] - 1
edec <- array( 0 , c( length(yclass) , length(yclass) ) )
colnames(edec) = yclass
rownames(edec) = yclass
for ( n in validcols ) {
currcol <- array( fvFinal[,n] , dim(fvFinal) )
edec[n,validcols] <- 1 - apply( ( currcol[,validcols] - fvFinal[,validcols] ) ** 2 , 2 , mean )
}
indsepar <- 0.7 # 1 - 0.06 * sqrt( nrow(fvHat) / length(yclass) )
if ( indsepar > 0.8 ) { warning("Many Classes for few Features! Consider a Network Increasing!") }
if ( indsepar < 0.5 ) { warning("Many Features for few Classes! Consider a Network Decreasing!") }
ebin <- edec > indsepar
for ( n in 1:nrow(ebin) ) {
for ( i in 1:nrow(ebin) ) {
for ( j in which(ebin[i,]|ebin[,i]) ) {
ebin[i,] <- ebin[i,]|ebin[,i]|ebin[j,]|ebin[,j]
}
}
}
ebin <- ebin[ c( -which(apply(ebin,1,sum)<=1) , -which(duplicated(ebin)) ) , ]
ebin <- array( ebin , c( length(ebin)/length(validcols) , length(yclass) ) )
colnames(ebin) = yclass
fvSeparated <- "Ok"
ntries <- 0
View(edec)
View(fvCurr)
View(fvFinal)
View(fvHat)
View(fvMean)
View(fvMemory)
a<-round(edec,2)
View(a)
View(ebin)
plot(c(0,10),c(0,10),'n',xlab=NA,ylab=NA,xaxt="n",yaxt="n")
rasterImage(edec,0,0,10,10)
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/code.R')
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/code.R')
load("net_mnist_0-9_9861.RData")
i<-1L;j<-1L
ind <- sample(length(base$test$y))
yatual <- base$test$y[base$test$y[ind]==base$test$c[i]]
y <- base$test$c[i]
cnnFF(base$test$x)
acc<-array(0,c(10,10))
ind <- sample(length(base$test$y),1000)
y <- base$test$c[i]
cnnFF(base$test$x[ind])
n <- 1000
ind <- sample(length(base$test$y),n)
y <- base$test$c[i]
cnnFF(array(base$test$x[ind],c(dim(x)[-4],n)))
cnnFF(array(base$test$x[ind],c(dim(base$test$x)[-4],n)))
n <- 100
ind <- sample(length(base$test$y),n)
y <- base$test$c[i]
cnnFF(array(base$test$x[ind],c(dim(base$test$x)[-4],n)))
fv <- net$layers[[length(net$layers)]]$a
xsvm <- as.data.frame(t(fv))
pred <- predict( classifier , xsvm )
pred
acc<-array(0,c(10,10))
n <- 100
ind <- sample(length(base$test$y),n)
y <- base$test$c[i]
cnnFF(array(base$test$x[,,,ind],c(dim(base$test$x)[-4],n)))
fv <- net$layers[[length(net$layers)]]$a
xsvm <- as.data.frame(t(fv))
pred <- predict( classifier , xsvm )
pred
acc<-array(0,c(10,10))
n <- 100
which(base$test$y==base$test$c[i])[1:n]
ind <- sample(which(base$test$y==base$test$c[i])[1:n])
ind <- sample(which(base$test$y==base$test$c[i]))[1:n]
cnnFF(array(base$test$x[,,,ind],c(dim(base$test$x)[-4],n)))
xsvm <- as.data.frame(t(net$layers[[length(net$layers)]]$a))
pred <- predict( classifier , xsvm )
pred
acc<-array(0,c(10,10))
n <- 100
for (i in 1:length(base$test$c)){
ind <- sample(which(base$test$y==base$test$c[i]))[1:n]
cnnFF(array(base$test$x[,,,ind],c(dim(base$test$x)[-4],n)))
xsvm <- as.data.frame(t(net$layers[[length(net$layers)]]$a))
pred <- predict( classifier , xsvm )
for (j in 1:length(base$test$c)){
acc[i,j] = sum(pred==base$test$c[j])
}
}
View(acc)
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/graphs.R')
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/func.R')
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/code.R')
base <- loadMnist( classvalues = 0:9 )
oad("net_mnist_0-9_9861.RData")
load("net_mnist_0-9_9861.RData")
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/graphs.R')
save(acc,file="error.RData")
View(acc)
View(acc)
View(acc)
appyl(acc,2,sum)
apply(acc,2,sum)
apply(acc,1,sum)
i<-1L
acc<-array(0,c(10,10))
n <- 1000
ind <- sample(which(base$test$y==base$test$c[i]))[1:n]
cnnFF(array(base$test$x[,,,ind],c(dim(base$test$x)[-4],n)))
xsvm <- as.data.frame(t(net$layers[[length(net$layers)]]$a))
pred <- predict( classifier , xsvm )
pred
xsvm[1:1000,1]
acc<-array(0,c(10,10))
for (i in 1:length(base$test$c)){
ind <- sample(which(base$test$y==base$test$c[i]))
cnnFF(array(base$test$x[,,,ind],c(dim(base$test$x)[-4],n)))
xsvm <- as.data.frame(t(net$layers[[length(net$layers)]]$a))
pred <- predict( classifier , xsvm )
for (j in 1:length(base$test$c)){
acc[i,j] = sum(pred==base$test$c[j])/10
}
}
apply(acc,1,sum)
save(acc,file="error.RData")
View(acc)
colnames(acc)=0:9
rownames(acc)=0:9
View(acc)
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/code.R')
load("net_cifar10_0-9_4550.RData")
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/graphs.R')
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/graphs.R')
View(acc)
colnames(acc)=base$test$c
rownames(acc)=base$test$c
View(acc)
apply(acc,1,sum)
apply(acc,2,sum)
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/code.R')
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/graphs.R')
View(acc)
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/graphs.R')
View(acc)
round(acc,1)
apply(round(acc,1),2,sum)
apply(round(acc,1),1,sum)
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/code.R')
trainNet( x = base$train$x , y = base$train$y , numdata = 1000 , alpha = 0.2 , batchsize = 1000 , numepochs = 1 )
View(net)
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/code.R')
trainNet( x = base$train$x , y = base$train$y , numdata = 1000 , alpha = 0.2 , batchsize = 1000 , numepochs = 1 )
View(net)
net$fv$mean
round(net$fv$mean,3)
round(net$fv$mean,2)
View(round(net$fv$mean,2))
View(net)
View(net$fv$final,2)
View(net$fv$final)
net$fv$final
net$fv$memory
View(net)
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/code.R')
trainNet( x = base$train$x , y = base$train$y , numdata = 1000 , alpha = 0.2 , batchsize = 1000 , numepochs = 1 )
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/code.R')
x <- base$train$x; y <- base$train$y; numdata <- 60000; alpha <- 0.5; batchsize <- 50; numepochs <- 1 ; i <- 1L ; j <- 1L
yclass <- unique(y)
numbatches <- floor( numdata / batchsize )
ind <- sample( dim(x)[4] , numdata )
batch_x <- x[ , , , ind[ ((j-1)*batchsize+1) : (j*batchsize) ] ]
batch_x <- array( batch_x , c( dim(x)[1:3] , batchsize ) )
batch_y <- y[ ind[ ((j-1)*batchsize+1) : (j*batchsize) ] ]
cnnFF( batch_x )
x <- base$train$x; y <- base$train$y; numdata <- 1000; alpha <- 0.5; batchsize <- 1000; numepochs <- 1 ; i <- 1L ; j <- 1L
yclass <- unique(y)
numbatches <- floor( numdata / batchsize )
ind <- sample( dim(x)[4] , numdata )
batch_x <- x[ , , , ind[ ((j-1)*batchsize+1) : (j*batchsize) ] ]
batch_x <- array( batch_x , c( dim(x)[1:3] , batchsize ) )
batch_y <- y[ ind[ ((j-1)*batchsize+1) : (j*batchsize) ] ]
cnnFF( batch_x )
cnnFV( batch_y , yclass )
View(net)
View(net)
cnnError( batch_y , yclass )
cnnBP()
cnnGrad( alpha )
View(base)
View(net)
View(classifier)
saveAll( x = base$test$x , y = base$test$y , numdata = 10000 )
View(net)
net[["fv"]][["mean"]]
net[["fv"]][["curr"]]
net[["E"]]
View(net$fv$mean[1:10,])
View(net$fv$curr[1:10,])
View(net$fv$error)
View(net$fv$final[1:10,])
ind <- sample( dim(x)[4] , numdata )
x <- base$train$x; y <- base$train$y; numdata <- 100; alpha <- 0.5; batchsize <- 100; numepochs <- 1 ; i <- 1L ; j <- 1L
yclass <- unique(y)
numbatches <- floor( numdata / batchsize )
ind <- sample( dim(x)[4] , numdata )
batch_x <- x[ , , , ind[ ((j-1)*batchsize+1) : (j*batchsize) ] ]
batch_x <- array( batch_x , c( dim(x)[1:3] , batchsize ) )
batch_y <- y[ ind[ ((j-1)*batchsize+1) : (j*batchsize) ] ]
cnnFF( batch_x )
cnnFV( batch_y , yclass )
View(net$fv$error)
net$fv$error>0.7
sum(net$fv$error>0.7)
ind <- sample( dim(x)[4] , numdata )
batch_x <- x[ , , , ind[ ((j-1)*batchsize+1) : (j*batchsize) ] ]
batch_x <- array( batch_x , c( dim(x)[1:3] , batchsize ) )
batch_y <- y[ ind[ ((j-1)*batchsize+1) : (j*batchsize) ] ]
cnnFF( batch_x )
cnnFV( batch_y , yclass )
sum(net$fv$error>0.7)
View(net$fv$error)
ind <- sample( dim(x)[4] , numdata )
batch_x <- x[ , , , ind[ ((j-1)*batchsize+1) : (j*batchsize) ] ]
batch_x <- array( batch_x , c( dim(x)[1:3] , batchsize ) )
batch_y <- y[ ind[ ((j-1)*batchsize+1) : (j*batchsize) ] ]
cnnFF( batch_x )
cnnFV( batch_y , yclass )
View(net$fv$error)
y<-batch_y
fvHat <- net$layers[[length(net$layers)]]$a;
validcols <- rep( 0 , length(unique(y)) )
for ( n in 1:length(unique(y)) ) {
validcols[n] <- which(unique(y)[n]==yclass)
}
fvMean <- array( 0 , c( nrow(fvHat) , length(yclass) ) )
colnames(fvMean) = yclass
for ( n in validcols ) {
fvMean[,n] <- rowMeans(array(fvHat[,y==yclass[n]],c(nrow(fvHat),max(c(1,sum(y==yclass[n]))))))
}
fvCurr <- array( 0 , c( nrow(fvHat) , length(yclass) ) )
colnames(fvCurr) = yclass
if ( "final" %in% names(net$fv) ) {
for ( n in validcols ) {
if ( !( yclass[n] %in% colnames(net$fv$final) ) ) {
stop( sprintf( "Class value \"%s\" not found on \"net$fv$final!\"!\n\n" , yclass[n] ) )
}
fvCurr[,n] <- net$fv$final[ , colnames(net$fv$final) == yclass[n] ]
}
}
for ( n in validcols ) {
fvCurr[ fvMean[,n] >= apply(fvMean[,validcols],1,mean) , n ] <- 1
fvCurr[ fvMean[,n] <  apply(fvMean[,validcols],1,mean) , n ] <- 0
}
if ( "memory" %in% names(net$fv) ) {
fvMemory <- net$fv$memory
} else {
fvMemory <- array( 0 , dim(fvCurr) )
}
colnames(fvMemory) = yclass
memMax <- apply(fvMemory[,validcols],1,mean) + apply(fvMemory[,validcols],1,sd)/2
memMin <- apply(fvMemory[,validcols],1,mean) - apply(fvMemory[,validcols],1,sd)/2
fvFinal <- fvCurr
fvFinal[ fvMemory > array(memMax,dim(fvFinal)) ] <- 1
fvFinal[ fvMemory < array(memMin,dim(fvFinal)) ] <- 0
fvMemory[ fvCurr == 1 ] <- fvMemory[ fvCurr == 1 ] + 1
fvMemory[ fvCurr == 0 ] <- fvMemory[ fvCurr == 0 ] - 1
edec <- array( 0 , c( length(yclass) , length(yclass) ) )
colnames(edec) = yclass
rownames(edec) = yclass
for ( n in validcols ) {
currcol <- array( fvFinal[,n] , dim(fvFinal) )
edec[n,validcols] <- 1 - apply( ( currcol[,validcols] - fvFinal[,validcols] ) ** 2 , 2 , mean )
}
indsepar <- 0.7 # 1 - 0.06 * sqrt( nrow(fvHat) / length(yclass) )
if ( indsepar > 0.8 ) { warning("Many Classes for few Features! Consider a Network Increasing!") }
if ( indsepar < 0.5 ) { warning("Many Features for few Classes! Consider a Network Decreasing!") }
ebin <- edec > indsepar
for ( n in 1:nrow(ebin) ) {
for ( i in 1:nrow(ebin) ) {
for ( j in which(ebin[i,]|ebin[,i]) ) {
ebin[i,] <- ebin[i,]|ebin[,i]|ebin[j,]|ebin[,j]
}
}
}
ebin <- ebin[ c( -which(apply(ebin,1,sum)<=1) , -which(duplicated(ebin)) ) , ]
ebin <- array( ebin , c( length(ebin)/length(validcols) , length(yclass) ) )
colnames(ebin) = yclass
fvSeparated <- "Ok"
ntries <- 0
View(net$fv$error)
length(ebin)
View(ebin)
View(edec)
View(fvMemory)
View(fvMean)
View(fvCurr)
View(edec)
a<-edec
View(a)
while ( length(ebin) > 0 ) {
fvSeparated <- "Sp"
tryCatch ( {
for ( i in 1:nrow(ebin) ) {
colbin <- ( rowSums(fvFinal[,which(ebin[i,])]) == 0 ) | ( rowSums(fvFinal[,which(ebin[i,])]) == sum(ebin[i,]) )
colmax <- max( edec[which(ebin[i,])[1] , (1:ncol(ebin))[-which(ebin[i,])[1]]] ) - indsepar
colchange <- ceiling( nrow(fvFinal) * colmax / sum(ebin[i,]) )
for ( j in 1:sum(ebin[i,]) ) {
colother <- apply( array( fvMean[colbin,which(ebin[i,])[-j]] , c(sum(colbin),sum(ebin[i,])-1) ) , 1 , mean )
colvar <- order( colother - fvMean[colbin,which(ebin[i,])[j]] )
colvar <- which(colbin)[ colvar[ sample( ceiling(length(colvar)/8) , min( c( colchange , ceiling(length(colvar)/8) ) ) ) ] ]
fvMean[ colvar , which(ebin[i,])[j] ] <- fvMean[ colvar , which(ebin[i,])[j] ] + 0.001
fvFinal[ colvar , which(ebin[i,])[j] ] <- 1
fvFinal[ colvar , which(ebin[i,])[-j] ] <- 0
}
}
}, error = function(e) ntries <- 4 )
for ( n in validcols ) {
currcol <- array( fvFinal[,n] , dim(fvFinal) )
edec[n,validcols] <- 1 - apply( ( currcol[,validcols] - fvFinal[,validcols] ) ** 2 , 2 , mean )
}
ebin <- edec > indsepar
for ( n in 1:nrow(ebin) ) {
for ( i in 1:nrow(ebin) ) {
for ( j in which(ebin[i,]|ebin[,i]) ) {
ebin[i,] <- ebin[i,]|ebin[,i]|ebin[j,]|ebin[,j]
}
}
}
ebin <- ebin[ c( -which(apply(ebin,1,sum)<=1) , -which(duplicated(ebin)) ) , ]
ebin <- array( ebin , c( length(ebin)/length(validcols) , length(yclass) ) )
colnames(ebin) = yclass
ntries <- ntries + 1
if ( ntries > 4 ) {
fvSeparated <- "No"
break
}
}
View(fvFinal)
round(fvMean,2)
fvMemory[1:10,]
fvCurr[1:10,]
fvFinal[1:10,]
round(a[1:10,],2)
fvCurr[1:10,]
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/code.R')
View(net)
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/graphs.R')
View(net)
png("L_MNIST.png")
plot(net$L,type='l',xlab=NA,ylab=NA,xlim=c(0,7200),ylim=c(20,55),col='blue')
dev.off()
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/code.R')
View(net)
png("L_CIFAR10.png")
plot(net$L,type='l',xlab=NA,ylab=NA,xlim=c(0,4000),ylim=c(50,100),col='blue')
dev.off()
plot(net$L,type='l',xlab=NA,ylab=NA,xlim=c(0,4000),ylim=c(50,100),col='blue')
min(net$L)
plot(net$L,type='l',xlab=NA,ylab=NA,xlim=c(0,4000),ylim=c(40,100),col='blue')
View(base)
View(net)
View(net)
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/graphs.R')
View(classifier)
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/code.R')
View(net)
View(classifier)
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/code.R')
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/graphs.R')
View(acc)
source('C:/Users/rafae/Dropbox/UFMG/2019-1/EEE928/artigo/final/rafael_fernandes_code.R')
